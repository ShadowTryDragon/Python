import pygame
import sys
import random


# Farben für das Snake-Spiel
class GameColors:
    # Schlange
    BODY_COLOR = (46, 58, 89)  # Dunkles Blau für den Körper
    HEAD_COLOR = (46, 58, 89)  # Helles Grün für den Kopf

    # Früchte
    APPLE_COLOR = (231, 76, 60)  # Rot für den Apfel
    FAKE_APPLE_COLOR = (155, 89, 182)  # Lila für den Fake-Apfel
    MIN_APPLE_COLOR = (39, 174, 96)  # Grün für den Halb-Apfel


class Snake:
    def __init__(self):
        self.__length = 1
        self.__positions = [((Settings.screen_width / 2), (Settings.screen_height / 2))]
        self.__direction = random.choice(Settings.directions)
        self.__color = GameColors.BODY_COLOR
        self.__score = 0

    def turn(self, new_direction):
        if (new_direction[0] * -1, new_direction[1] * -1) != self.__direction:  # cannot do a 180
            self.__direction = new_direction

    def move(self):
        head_pos = self.get_head_position()
        x, y = self.__direction
        new = (((head_pos[0] + (x * Settings.grid_size)) % Settings.screen_width),
               (head_pos[1] + (y * Settings.grid_size)) % Settings.screen_height)
        if len(self.__positions) > 2 and new in self.__positions[2:]:
            self.reset()
        else:
            self.__positions.insert(0, new)
            if len(self.__positions) > self.__length:
                self.__positions.pop()

    def get_positions(self):
        return self.__positions

    def get_head_position(self):
        return self.__positions[0]

    def reset(self):
        self.reset_length()
        self.__positions = [((Settings.screen_width / 2), (Settings.screen_height / 2))]
        self.__direction = random.choice(Settings.directions)
        self.__score = 0

    def increase_length(self):
        self.__length += 1

    def decrease_length(self):
        if self.__length > 1:  # Verhindern, dass die Länge negativ wird
            self.__length -= 1
            self.__positions.pop()  # Entfernt das letzte Segment

    def reset_length(self):
        self.__length = 1

    def increase_score(self, value):
        self.__score += value

    def get_score(self):
        return self.__score

    def reset_score(self):
        self.__score = 0

    def draw(self, surface):
        for index, pos in enumerate(self.__positions):
                    r = pygame.Rect((pos[0], pos[1]), (Settings.grid_size, Settings.grid_size))
                    if index == 0:  # Kopf der Schlange
                        pygame.draw.rect(surface, GameColors.HEAD_COLOR, r)  # Rote Farbe für den Kopf
                    else:
                        pygame.draw.rect(surface, self.__color, r)  # Normale Farbe für den Körper
                    pygame.draw.rect(surface, (93, 216, 228), r, 1)  # Rand für alle Teile


class Food:
    def __init__(self, count=3, color=(0, 0, 0), snake=None):
        self.__positions = []
        self.__count = count
        self.__color = color
        self.snake = snake  # Referenz auf die Schlange
        self.randomize_positions()

    def get_positions(self):
        return self.__positions

    def randomize_positions(self):
        self.__positions = []
        while len(self.__positions) < self.__count:
            x_pos = random.randint(0, int(Settings.grid_width) - 1) * Settings.grid_size
            y_pos = random.randint(0, int(Settings.grid_height) - 1) * Settings.grid_size
            new_position = (x_pos, y_pos)
            # Hier wird die Position der Frucht gegen die Positionen der Schlange geprüft
            if new_position not in self.__positions and new_position not in self.snake.get_positions():
                self.__positions.append(new_position)

    def draw(self, surface):
        for pos in self.__positions:
            r = pygame.Rect((pos[0], pos[1]), (Settings.grid_size, Settings.grid_size))
            pygame.draw.rect(surface, self.__color, r)
            pygame.draw.rect(surface, (93, 216, 228), r, 1)




class Apple(Food):
    def __init__(self, count=2, snake=None):
        super().__init__(count, GameColors.APPLE_COLOR, snake=snake)

    def action(self, snake):
        snake.increase_length()
        snake.increase_score(1)  # Apfel gibt 2 Punkte


class FakeApple(Food):
    def __init__(self, count=1, snake=None):
        super().__init__(count, GameColors.FAKE_APPLE_COLOR, snake=snake)

    def action(self, snake):
        snake.increase_length()
        snake.increase_length()
        snake.increase_length()
        snake.increase_score(0)  # Fake-Apfel gibt 3 Punkte


class MinApple(Food):
    def __init__(self, count=1, snake=None):
        super().__init__(count, GameColors.MIN_APPLE_COLOR, snake=snake)

    def action(self, snake):
        snake.decrease_length()  # HalfApple reduzeirt Länge


class Settings:
    screen_width = 480
    screen_height = 480

    grid_size = 20
    grid_width = screen_width / grid_size
    grid_height = screen_height / grid_size

    up = (0, -1)
    down = (0, 1)
    left = (-1, 0)
    right = (1, 0)

    directions = [up, down, left, right]


class SnakeGame:
    def __init__(self):
        pygame.init()
        self.__clock = pygame.time.Clock()  # Hier setzen wir das Attribut __clock
        self.__screen = pygame.display.set_mode((Settings.screen_width, Settings.screen_height), 0, 32)
        self.__surface = pygame.Surface(self.__screen.get_size()).convert()
        self.__snake = Snake()
        self.__apple = Apple(count=1, snake=self.__snake)
        self.__fakeapple = FakeApple(count=1, snake=self.__snake)
        self.__halfapple = MinApple(count=1, snake=self.__snake)
        self.__my_font = pygame.font.SysFont("monospace", 16)


    def __check_collisions(self):
        head_pos = self.__snake.get_head_position()

        if head_pos in self.__apple.get_positions():
            self.__apple.action(self.__snake)
            self.__apple.randomize_positions()
            self.__fakeapple.randomize_positions()

        elif head_pos in self.__fakeapple.get_positions():
            self.__fakeapple.action(self.__snake)
            self.__apple.randomize_positions()
            self.__fakeapple.randomize_positions()

        elif head_pos in self.__halfapple.get_positions():
            self.__halfapple.action(self.__snake)
            self.__halfapple.randomize_positions()
            self.__halfapple.randomize_positions()


    def __draw_grid(self, surface):
        for y in range(0, int(Settings.grid_height)):
            for x in range(0, int(Settings.grid_width)):
                r = pygame.Rect((x * Settings.grid_size, y * Settings.grid_size),
                                (Settings.grid_size, Settings.grid_size))
                color = (93, 216, 228) if (x + y) % 2 == 0 else (84, 194, 205)
                pygame.draw.rect(surface, color, r)

    def __quit_game(self):
        pygame.quit()
        sys.exit()
    def __pause(self):





    def __handle_keys(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.__quit_game()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP:
                    self.__snake.turn(Settings.up)
                elif event.key == pygame.K_DOWN:
                    self.__snake.turn(Settings.down)
                elif event.key == pygame.K_LEFT:
                    self.__snake.turn(Settings.left)
                elif event.key == pygame.K_RIGHT:
                    self.__snake.turn(Settings.right)
                elif event.key == pygame.K_ESCAPE:
                    self.__quit_game()
                elif event.key == pygame.K_q:
                    self.__quit_game()


    def __draw_objects(self):
        self.__snake.draw(self.__surface)
        self.__apple.draw(self.__surface)
        self.__fakeapple.draw(self.__surface)
        self.__halfapple.draw(self.__surface)


    def __update_screen(self):
        self.__screen.blit(self.__surface, (0, 0))
        text = self.__my_font.render("Score {0}".format(self.__snake.get_score()), True, (0, 0, 0))
        self.__screen.blit(text, (5, 10))
        pygame.display.update()

    def main_loop(self):
        while True:
            self.__clock.tick(10)
            self.__handle_keys()
            self.__draw_grid(self.__surface)
            self.__snake.move()
            self.__check_collisions()
            self.__draw_objects()
            self.__update_screen()


game = SnakeGame()
game.main_loop()
